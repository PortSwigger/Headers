Missing HTTP-Strict-Transport-Security header ::: The HTTP protocol by itself is clear text, meaning that any data that is transmitted via HTTP can be captured and the contents viewed. To keep data private and prevent it from being intercepted, HTTP is often tunnelled through either Secure Sockets Layer (SSL) or Transport Layer Security (TLS). When either of these encryption standards are used, it is referred to as HTTPS.\nHTTP Strict Transport Security (HSTS) is an optional response header that can be configured on the server to instruct the browser to only communicate via HTTPS. This will be enforced by the browser even if the user requests a HTTP resource on the same server.\nCyber-criminals will often attempt to compromise sensitive information passed from the client to the server using HTTP. This can be conducted via various Man-in-The-Middle (MiTM) attacks or through network packet captures.---Depending on the framework being used the implementation methods will vary, however it is advised that the `Strict-Transport-Security` header be configured on the server.One of the options for this header is `max-age`, which is a representation (in milliseconds) determining the time in which the client's browser will adhere to the header policy.Depending on the environment and the application this time period could be from as low as minutes to as long as days.
Missing Cache-Control header ::: The HTTP 'Cache-Control' header is used to specify directives for caching mechanisms.\nThe server did not return or returned an invalid 'Cache-Control' header which means page containing sensitive information (password, credit card, personal data, social security number, etc) could be stored on client side disk and then be exposed to unauthorised persons.---Configure your web server to include a 'Cache-Control' header with appropriate directives. If page contains sensitive information 'Cache-Control' value should be 'no-store' and 'Pragma' header value should be 'no-cache'.
Missing X-Frame-Options header ::: Clickjacking (User Interface redress attack, UI redress attack, UI redressing) is a malicious technique of tricking a Web user into clicking on something different from what the user perceives they are clicking on, thus potentially revealing confidential information or taking control of their computer while clicking on seemingly innocuous web pages.\nThe server didn't return an `X-Frame-Options` header which means that this website could be at risk of a clickjacking attack.\nThe `X-Frame-Options` HTTP response header can be used to indicate whether or not a browser should be allowed to render a page inside a frame or iframe. Sites can use this to avoid clickjacking attacks, by ensuring that their content is not embedded into other sites.---Configure your web server to include an `X-Frame-Options` header.
Missing Content-Security-Policy header ::: Content Security Policy (CSP) is a web security standard that helps to mitigate attacks like cross-site scripting (XSS), clickjacking or mixed content issues. CSP provides mechanisms to websites to restrict content that browsers will be allowed to load.---Configure Content Security Policy on your website by adding 'Content-Security-Policy' HTTP header or meta tag http-equiv='Content-Security-Policy'.
Missing X-Content-Type-Options header ::: The HTTP 'X-Content-Type-Options' response header prevents the browser from MIME-sniffing a response away from the declared content-type.\nThe server did not return a correct 'X-Content-Type-Options' header, which means that this website could be at risk of a Cross-Site Scripting (XSS) attack.---Configure your web server to include an 'X-Content-Type-Options' header with a value of 'nosniff'.
Missing X-XSS-Protection header ::: The HTTP 'X-XSS-Protection' response header is a feature of modern browsers that allows websites to control their XSS auditors.\nThe server is not configured to return a 'X-XSS-Protection' header which means that any pages on this website could be at risk of a Cross-Site Scripting (XSS) attack. This URL is flagged as a specific example.\nIf legacy browsers support is not needed, it is recommended to use Content-Security-Policy without allowing unsafe-inline scripts instead.---Configure your web server to include an 'X-XSS-Protection' header with a value of '1; mode=block' on all pages.:web
Missing Referrer-Policy header ::: Referrer Policy provides mechanisms to websites to restrict referrer information (sent in the referer header) that browsers will be allowed to add.\nNo Referrer Policy header or metatag configuration has been detected.---Configure Referrer Policy on your website by adding Referrer-Policy HTTP header or meta tag referrer in HTML.
Missing Cookie Secure flag ::: When the Secure flag is set on a cookie, the browser will prevent it from being sent over a clear text channel (HTTP) and only allow it to be sent when an encrypted channel is used (HTTPS)\nIt was detected that a cookie is being set without the Secure flag. Note that if the cookie does not contain sensitive information, the risk of this vulnerability is mitigated.---If the cookie contains sensitive information, then the server should ensure that the cookie has the `secure` flag set.
Missing Cookie HttpOnly flag ::: The HttpOnly flag assists in the prevention of client side-scripts (such as JavaScript) from accessing and using the cookie.\nThis can help prevent XSS attacks from targeting the cookies holding the client's session token (setting the HttpOnly flag does not prevent, nor safeguard against XSS vulnerabilities themselves).---The initial step to remedy this would be to determine whether any client-side scripts (such as JavaScript) need to access the cookie and if not, set the HttpOnly flag.\nIt should be noted that some older browsers are not compatible with the HttpOnly flag; therefore, setting this flag will not protect those clients against this form of attack.
Dangerous Server header ::: The Server header sent by the remote web server disclose information that can aid an attacker, such as the server type of version.---It is advised to remove the Server header of the web server to not disclose detailed information about the underlying web server.
Dangerous X-Powered-By header ::: The  X-Powered-By header sent by the remote web server disclose information that can aid an attacker, such as languages and/or frameworks or technologies used by the web server.---It is advised to remove the X-Powered-By headers of the web server to not disclose detailed information about the underlying technologies.
Potentially Dangerous Access-Control-Allow-Origin header ::: The CORS policy allows the application to specify exceptions to the protections implemented by the browser, and enables the developer to specify allowlisted domains for which external JavaScript is permitted to execute and interact with the page.\nThe 'Access-Control-Allow-Origin' header is insecure when set to '*' or null, as it allows any domain to perform cross-domain requests and read responses. An attacker could abuse this configuration to retrieve private content from an application which does not use standard authentication mechanisms (for example, an Intranet allowing access from the internal network only).---Unless the target application is specifically designed to serve public content to any domain, the 'Access-Control-Allow-Origin' should be configured with an allowlist including only known and trusted domains to perform cross-domain requests if needed, or should be disabled.
Potentially Dangerous Access-Control-Allow-Credentials header ::: The default behaviour of cross-origin resource requests is for requests to be passed without credentials like cookies and the Authorization header. However, the cross-domain server can permit reading of the response when credentials are passed to it by setting the CORS Access-Control-Allow-Credentials header to true.\nIf the value is set to truethen the browser will send credentials (cookies, authorization headers or TLS client certificates). A wrong Access-Control-Allow-Origin configuration can allow external sites to steal credentials.---Set the Access-Control-Allow-Credentials header to true only when required and after having validated that the Access-Control-Allow-Origin header is properly set.